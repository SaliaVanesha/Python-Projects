import numpy as np
import matplotlib.pyplot as plt
from sympy import symbols, diff, lambdify

# Symbolic variable
t = symbols('t')

# Input position equation (customize this or input manually)
print("Enter the position equation as a function of time (e.g., 5*t**2 + 2*t + 3):")
position_eq = input("Position equation x(t): ")
x_t = eval(position_eq)  # Position equation as a symbolic expression

# Calculate velocity and acceleration equations
v_t = diff(x_t, t)       # Velocity as the derivative of position
a_t = diff(v_t, t)       # Acceleration as the derivative of velocity

# Display equations
print(f"\nPosition equation: x(t) = {x_t}")
print(f"Velocity equation: v(t) = {v_t}")
print(f"Acceleration equation: a(t) = {a_t}")

# Convert symbolic equations to numerical functions
x_t_func = lambdify(t, x_t, modules=["numpy"])
v_t_func = lambdify(t, v_t, modules=["numpy"])
a_t_func = lambdify(t, a_t, modules=["numpy"])

# Create time values for the graph
time = np.linspace(0, 10, 500)  # Adjust range (0 to 10 seconds) as needed

# Calculate position, velocity, and acceleration values
x_vals = x_t_func(time)
v_vals = v_t_func(time)
a_vals = a_t_func(time)

# Plot graphs
plt.figure(figsize=(10, 8))

# Position-Time Graph
plt.subplot(3, 1, 1)
plt.plot(time, x_vals, label="Position x(t)", color="blue")
plt.xlabel("Time (s)")
plt.ylabel("Position (m)")
plt.title("Position vs. Time")
plt.grid()
plt.legend()

# Velocity-Time Graph
plt.subplot(3, 1, 2)
plt.plot(time, v_vals, label="Velocity v(t)", color="green")
plt.xlabel("Time (s)")
plt.ylabel("Velocity (m/s)")
plt.title("Velocity vs. Time")
plt.grid()
plt.legend()

# Acceleration-Time Graph
plt.subplot(3, 1, 3)
plt.plot(time, a_vals, label="Acceleration a(t)", color="red")
plt.xlabel("Time (s)")
plt.ylabel("Acceleration (m/sÂ²)")
plt.title("Acceleration vs. Time")
plt.grid()
plt.legend()

# Show plots
plt.tight_layout()
plt.show()
